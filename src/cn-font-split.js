import fs from "fs";
import { fontSplit } from "cn-font-split";
import CONFIG_JSON from "../config.json" with { type: "json" };



export const CN_FONT_SPLIT_EX = async (config) => {

    console.log("🚀 Splitting ...");

    const input = config.input ? config.input : "./main.ttf";
    const output = config.output ? config.output : false;
    const cssFontName = config.name ? config.name : undefined;

    let inputPath;
    let outDir;

    const inputType = input.endsWith(".ttf") || input.endsWith(".otf") || input.endsWith(".woff2") ? true : false;
    if (input.startsWith("../") || input.startsWith("./") || input.startsWith("/")) {
        inputType ? (inputPath = input) : inputPath += ".ttf";
    } else {
        inputType ? (inputPath = `./${input}`) : (inputPath = `./${input}.ttf`);
    };

    if (output) {
        output.startsWith("../") || output.startsWith("./") || output.startsWith("/") ? (
            outDir = output
        ) : (
            outDir = `./${output}`
        );
    } else {
        outDir = `./${inputPath.substring((inputPath.lastIndexOf("/")) + 1, (inputPath.lastIndexOf(".")))}`;
    };

    await fontSplit({
        input: new Uint8Array(fs.readFileSync(inputPath).buffer),
        outDir: outDir,
        chunkSize: 100 * 1024,
        languageAreas: true,
        fontFeature: true,
        reduceMins: true,
        autoSubset: true,
        css: {
            fontFamily: cssFontName,
            compress: true
        },
        testHtml: false,
        reporter: false,
        renameOutputFont: "[hash:16].[ext]",
        silent: true
    });

    const indexProtoPath = `${outDir}/index.proto`;
    try {
        if (fs.existsSync(indexProtoPath)) {
            fs.unlinkSync(indexProtoPath);
        };
    } catch { };

    await (async () => {
        const filePath = `${outDir}/result.css`;
        fs.readFile(filePath, "utf8", (e, data) => {
            if (e) { console.log("❌ " + e); return; };
            let result;

            const format = data.replace(
                /Generated By cn-font-split@\d+\.\d+\.\d+ https:\/\/www\.npmjs\.com\/package\/cn-font-split\s+CreateTime: \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+[+-]\d{2}:\d{2};/,
                (
                    CONFIG_JSON.online ?
                        "Service and Built By: ZeoSeven https://zeoseven.com\nGenerated By cn-font-split https://www.npmjs.com/package/cn-font-split" :
                        "Generated By cn-font-split https://www.npmjs.com/package/cn-font-split"
                )
            ).replace(
                /\n\s+\*\//,
                " */"
            ).replace(
                /Windows\s.{2}\sOther\s/g,
                ""
            ).replace(
                /Windows\s.{2}\s/g,
                ""
            ).replace(
                /Macintosh\s.{2}\sOther\s/g,
                ""
            ).replace(
                /Macintosh\s.{2}\s/g,
                ""
            ).replace(
                /Windows\s.{5}\sOther\s/g,
                ""
            ).replace(
                /Windows\s.{5}\s/g,
                ""
            ).replace(
                /Macintosh\s.{5}\sOther\s/g,
                ""
            ).replace(
                /Macintosh\s.{5}\s/g,
                ""
            ).replace(
                /Unicode\s.{2}\s/g,
                ""
            ).replace(
                /Unicode\s.{5}\s/g,
                ""
            );

            result = format.replace(/\/\*\s([\s\S]*?)\s\*\//g, (match, content) => {
                return `/* ${[...new Set(content.split("\n"))].join("\n")} */`;
            });

            fs.writeFile(filePath, result, "utf8", e => {
                if (e) {
                    console.log(e);
                    return;
                };
            });
        });
    })();

    return;

};
